5.1 테이블
5.1.1 테이블 생성
CREATE TABLE table_name ( column_name datatype [DEFAULT expr] [column_constraint] [, ....]
[, table_constraint, ....] );

column_constraint	[CONSTRAINT constraint_name] constraint_type

table_constraint	[CONSTRAINT constraint_name] constraint_type (column_name , .....)

- 테이블 및 컬럼 이름
	+ 문자로 시작, 30자 이하
	+ 영문 대/소문자, 숫자, 특수문자, 한글만 포함 가능.
	+ 중복되는 이름은 사용할 수 없음.
	+ 예약 키워드(CREATE, TABLE, COLUMN 등) 는 사용할 수 없음. 

테이블 생성 예시
CREATE TABLE TEST
(ID	NUMBER(S),
NAME	CHAR(18)
ADDRESS	VARCHAR2(50)
);

* INSERT 구문
- 구문형식:
INSERT INTO 테이블_이름 VALUES([VALUE] [, ....], DEFAULT);
-> DEFAULT : 바뀌는 값이어선 안됨(정확히는 ...?)
INSERT INTO 테이블_이름([COLUMN_LIST]) VALUES([VALUE] [, ....] );
+ VALUE의 갯수또는 타입이 맞지 않으면 오류가 난다.

5.1.2 제약조건(CONSTRAINT)
- 데이터 무결성
	+ 데이터베이스에 저장되어 있는 데이터가 손상되거나 원래의 의미를 잃지 않고 유지하는 상태
- 데이터 무결성 제약조건
	+ 데이터 무결성을 보장하기 위해 오라클에서 지원하는 방법
	EX) 유효하지 않은 데이터 입력 바잊, 유효한 범위에서만 데이터 변경/삭제 작업 

* constraint 와 constraint name은 생략 가능하다.
- ID CHAR(3) CONSTRAINT TN2_ID_NN NOT NULL(ID) = ID CHAR(3) NOT NULL;

1) NOT NULL
- 설정 범위 : Column Only
- 컬럼에 NULL이 들어가지 못하게 한다.

2) UNIQUE
- 설정 범위 : Column, Table
- 중복되지 않는 값만 허용.
* UNIQUE를 걸게되면 별도의 INDEX가 설정됨.

CREATE TABLE TABLE_UNIQUE2
(
	ID 	CHAR(3),
	SNAME	VARCHAR2(20),
	SCODE	CHAR(2),
	CONSTRAINT TN2_ID_UN UNIQUE (ID,SNAME)
);

INSERT INTO TABLE_UNIQUE2 VALUES('100','ORACLE','01')
INSERT INTO TABLE_UNIQUE2 VALUES('200','ORACLE','01')	-> ID와 SNAME이 둘다 UNIQUE 해야하므로 정상적으로 작동.
INSERT INTO TABLE_UNIQUE2 VALUES('200','ORACLE','02')	-> 에러난다.

3) PRIMARY KEY
- UNIQUE + NOT NULL
- 테이블 당 1개만 생성 가능.
- COMPOSIT PRIMARY KEY 또한 가능.

* 관계형 테이블은 다 대 다의 관계를 표현하기 힘들어, 교차실체 테이블을 만들어 1:다 의 관계로 표현한다.
- 교차실체의 두 컬럼은 외래키이자 기본키. 또한 COMPOSIT PRIMARY KEY이다.

4) FOREIGN KEY
- 참조 테이블의 컬럼 값과 일치하는 값이나 NULL 상태를 유지하도록 한다.
- 적용범위 : COLUMN, TABLE
- 부모 테이블의 참조되는 COLUMN은 PRIMARY KEY 또는 UNIQUE 속성이 붙어있어야 함.
- COMPOSIT PRIMARY KEY는 COLUMN 레벨로 사용 불가. -> TABLE 레벨로 잡아야!

CREATE TABLE TABLE_FK
(
	ID	CHAR(3),
	SNAME	VARCHAR2(20),
	LID	CHAR(2)	REFERENCES LOCATION (LOCATION_ID)
);
-> LID COLUMN에 LOCATION 테이블의 기본키 LOCATION_ID를 외래키로 받아들임.

제약조건 - FOREIGN KEY -> TABLE레벨에서 생성
- 테이블 레벨에서 생성하는 구문은 FOREIGN KEY 키워드가 추가됨
- 부모의 기본키가 COMPOSIT PRIMARY KEY일 경우에 주로 사용

* FOREIGN KEY : DELETION OPTION
- FOREIGN KEY 제약 조건을 생성할 때, 참조 컬럼 값이 삭제되는 경우 FOREIGN KEY 설정 값을 어떻게 처리할 지 지정 가능하다.

[구문]
1) ON DELETE SET NULL	: 부모 테이블의 데이터가 삭제나 변경시 자식 테이블의 해당 자료는 NULL로 적용됨.
2) ON DELETE SET DEFAULT: 부모 테이블의 데이터가 삭제나 변경시 자식 테이블의 해당 자료는 DEFAULT에 적용된 으로 적용됨.
3) ON DELETE CASCATE	: 부모 테이블의 데이터가 삭제나 변경시 오류가 아닌 자식 테이블의 데이터에도 적용.

5) CHECK
- COLUMN의 제약조건을 설정.

예제1)
CREATE TABLE TABLE_CHECK
(
	EMP_ID	CHAR(3) PRIMARY KEY,
	SALARY NUMBER	CHECK( SALARY > 0),
	MARRIAGE CHAR(1),
	CONSTRAINT CHK_MRG CHECK (MARRIAGE IN ('Y','N'))
);

5.1.3 서브쿼리를 활용한 테이블 생성 구문
- 'AS SUBQUERY' 옵션을 사용하면 테이블 생성과 행 삽입을 동시에 할 수 있음.
- 이때 AS SUBQUERY는 생략 불가.
구문
CREATE TABLE table_name[(column_name [DEFAULT expr] [, ....] )] AS SUBQUERY;
	+ 테이블을 정의하고, SUBQUERY의 실행 결과가 자동으로 입력된다.
	+ 컬럼 정의
		1) 데이터 타입 정의 불가 : 컬럼 이름 및 DEFAULT 값만 정의 가능
		2) 컬럼 이름 생략 가능 : 서브쿼리에서 사용한 컬럼 이름이 적용.
		3) 제약 조건 : 서브 쿼리에서 사용한 대상 컬럼들의 NOT NULL 조건은 자동 반영됨
		4) 생성 시점에 컬럼 레벨에서 제약조건 생성 가능 -> REFERENCES 제약 조건 불가.
				-> 나머지는 반영이 되지 않으므로, 추후 별도로 제약조건을 지정해주어야 함.
	+ BUT 자주 쓰이진 않는다. WHY? -> 차라리 이럴거면 VIEW를 만들고 말지.
