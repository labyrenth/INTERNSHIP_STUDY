5.2 뷰
5.2.1. 개념
- 하나 또는 하나 이상의 테이블/뷰에 포함된 데이터 부분 집합을 나타내는 논리적인 객체 -> 선택적인 정보만 제공 가능 (뷰에 대한 권한 설정을 통해!)
- 주로 읽기 전용(SELECT) 테이블을 만들기 위해 사용된다.
- 자체적으로 데이터를 포함하지 않는다. -> 베이스 테이블에서 데이터를 가져온다.
  + 보통 VIEW에서는 INSERT, UPDATE, DELETE는 사용 불가능. SELECT만 가능.
  + 단일 뷰는 DML 가능. 복합뷰는 PL/SQL을 이용, 프로시저를 생성해서 (지정된 트리거가 만족될 시, 실행 계획을 절차적으로 작동) 이를 가능하도록 할 수 있기는 하다.
- 베이스 테이블(BASE TABLE) : 뷰를 통해 보여지는 데이터를 포함하고 있는 실제 테이블

- 뷰를 생성할 때 사용하는 서브쿼리는 일반적인 SELECT 구문을 사용.
- 생성된 뷰는 테이블처럼 취급함.

CREATE OR REPLACE VIEW view_name  -> view_name에 해당하는 view가 없으면 새로 생성, 있으면 수정 함.

* 뷰의 컬럼 별칭 사용? -> 뷰 정의 부분과 서브쿼리 부분에서 지정 가능하다.
CREATE OR REPLACE VIEW V_EMP_DEPT_JOB(ENM, DNM, TITLE)
AS	SELECT EMP_NAME, DEPT_NAME, JOB_TITLE
    FROM EMPLOYEE
	  LEFT JOIN DEPARTMENT USING (DEPT_ID)
	  LEFT JOIN JOB USING (JOB_ID)
	  WHERE JOB_TITLE = '사원';
	
CREATE OR REPLACE VIEW V_EMP_DEPT_JOB
AS	SELECT  EMP_NAME AS ENM,
			      DEPT_NAME AS DNM,
			      JOB_TITLE AS TITLE
	  FROM EMPLOYEE
	  LEFT JOIN DEPARTMENT USING (DEPT_ID)
	  LEFT JOIN JOB USING (JOB_ID)
	  WHERE JOB_TITLE = '사원';
    
의 결과는 같다.

* VIEW는 물리적인 저장장소를 쓰는것이 아닌, 논리적인 TABLE 이라는 것을 기억하자.

- 뷰 삭제 : DROP VIEW view_name

5.2.9 인라인 뷰 ※ 매우 중요!
- 별칭을 사용하는 서브쿼리 -> 일반적으로 FROM 절에서 사용
- 서브쿼리가 FROM 절 안에서 사용될 경우, 해당 서브쿼리를 '인라인 뷰'라고 일컫는다.
  서브쿼리의 결과가 하나의 테이블에 대한 뷰처럼 사용되기에 이렇게 부르는 것이다.
SELECT	EMP_NAME, SALARY
FROM
		(
			SELECT	NVL(DEPT_ID,'N/A') AS "DID",
					ROUND(AVG(SALARY),-3) AS "DAVG"
			FROM EMPLOYEE
			GROUP BY DEPT_ID
		) INLV
JOIN EMPLOYEE ON (NVL(DEPT_ID,'N/A') = INLV.DID)
WHERE SALARY > INLV.DAVG

CREATE OR REPLACE VIEW V_DEPT_SALAVG("DID", "DAVG")
AS
	SELECT NVL(DEPT_ID,'N/A'), ROUND(AVG(SALARY),-3)
	FROM EMPLOYEE
	GROUP BY DEPT_ID;
	
SELECT EMP_NAME, SALARY
FROM EMPLOYEE
JOIN V_DEPT_SALAVG ON (NVL(DEPT_ID, 'N/A') = DID)
WHERE SALARY > DAVG
ORDER BY 2 DESC;

와 다음 예제의 결과는 서로 같다. (물론 위의 예제는 VIEW가 생성되어 반복 사용 가능하다는 차이점이 있음)

SELECT	EMP_NAME, SALARY
FROM
	(
		SELECT	NVL(DEPT_ID,'N/A') AS "DID",
		ROUND(AVG(SALARY),-3) AS "DAVG"
		FROM EMPLOYEE
		GROUP BY DEPT_ID
	) INLV
JOIN EMPLOYEE ON (NVL(DEPT_ID,'N/A') = INLV.DID)
WHERE SALARY > INLV.DAVG

-> 내부에 VIEW를 하나 새로 만들었음을 알 수 있다!

※ 인라인 뷰 활용 : TOP N 분석 개념
- TOP N 분석이란? 조건에 맞는 최상위(또는 최하위) 레코드 N개를 식별해야 하는 경우에 사용
- 오라클 환경에서 TOP N 분석 원리
	1) 원하는 순서대로 정렬
	2) 오라클엔 테이블마다 가상의 컬럼 ROWID, ROWNUM (주로 INDEX 사용시에 사용) 이 있는데, TOP N 시 ROWNUM이라는 가상 컬럼을 이용하여 정렬 순서대로 순번을 부여.
	3) 부여된 순번을 이용하여, 필요한 수 만큼 식별.
	
* ROWNUM : SQL 구문 수행 후, RESULT SET 각 행에 1부터 시작하는 일련의 숫자를 자동으로 할당한 가상 컬럼.
SELECT	ROWNUM, EMP_NAME, SALARY
FROM
		(
			SELECT	NVL(DEPT_ID,'N/A') AS "DID",
					ROUND(AVG(SALARY),-3) AS "DAVG"
			FROM EMPLOYEE
			GROUP BY DEPT_ID
		) INLV
JOIN EMPLOYEE ON (NVL(DEPT_ID,'N/A') = INLV.DID)
WHERE SALARY > INLV.DAVG

사용시,
 ROWNUM EMP_NAME SALARY  
 ------ -------- ------- 
      1 한선기      9000000
      2 안석규      3500000
      3 조재형      3800000
      4 김순이      3400000
      5 엄정하      2420000
      6 심하균      2300000
      7 박하일      2600000
      8 권상후      3410000
      9 임영애      2640000 의 값이 나온다!

* ROWNUM 특징
- WHERE 절이 실행되면서 순차적으로 할당됨
	+ 순번을 활용하려면 ROWNUM이 할당되기 전에 미리 정렬을 해야함.
	+ 미리 정렬된 결과를 가지고 있도록 하기 위해 인라인 뷰 사용!
- 할당된 후에는 변경되지 않음
- 또한 ROWNUM 값으로 특정 행을 선택할 수 없지만, RESULT SET이 1st 행(ROWNUM =1) 은 선택가능.
	+ BUT ROWNUM 값을 이용하여 일정 범위에 해당하는 행만 선택할 수 있음
	+ N 순위보다 같거나 적은 범위만 식별 가능 : EX) 상위 5건 -> ROWNUM <= 5

예제)

SELECT ROWNUM, EMP_NAME, SALARY
FROM
(
	SELECT	EMP_NAME, SALARY
	FROM
			(
				SELECT	NVL(DEPT_ID,'N/A') AS "DID",
						ROUND(AVG(SALARY),-3) AS "DAVG"
				FROM EMPLOYEE
				GROUP BY DEPT_ID	--부서별 급여 평균
			) INLV --(C)
	JOIN EMPLOYEE ON (NVL(DEPT_ID,'N/A') = INLV.DID)
	WHERE SALARY > INLV.DAVG 
	ORDER BY 2 DESC
) -- (A)
WHERE ROWNUM <= 5 --(B)

-> ROWNUM 자체는 'WHERE 절때 순차적으로 할당' 이기 때문에, (A) 만으로는 정렬된 결과가 나오는것은 아니다. 그러므로, (A)를 (B)의 인라인 뷰로 집어넣어,
정렬된 결과를 도출해 낸다.

* ORACLE만의 특수 함수 - RANK
- 지정한 값의 순위를 반환하거나, 지정한 값을 기준으로 순위를 지정
1) WITHIN -> 해당 COLUMN 안에서 RANK() 안의 값이 몇등인지 반환
SELECT RANK(2300000) WITHIN GROUP (ORDER BY SALARY DESC) AS RANK
FROM EMPLOYEE

2) OVER -> 전체 COLUMN의 랭크 순위를 반환.
SELECT *
FROM
(
	SELECT EMP_NAME, SALARY, RANK() OVER (ORDER BY SALARY DESC) AS RANK
	FROM EMPLOYEE
)
ORDER BY RANK;
