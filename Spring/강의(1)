spring ~> 하나의 openSource FrameWork

Sprint 특징
1) Inversion Of Control
- 객체 생성을 우리가 할 수 없다.
- Spring Container에서 우리가 만든 클래스를 관리.
- XML로 명세된 설정 파일을 통해 설정(Schema 기반 설정)하거나, @을 통해 설정 (Annotaion 기반 설정)
* web으로 넘어가게 되면 xml을 이용한 설정 파일이 여러개 있게 된다.
	1-1) Dependency Injection	: 의존관계 주입(이제부터 new 연산자로 객체를 만들지 않는다.) ~> 관계 설정을 통해서 의존관계 설정!
	1-2) dependency Lookup	: 

2) AOP
- 관점 지향 프로그래밍

3) SpringMVC

* C:\사용자\.m2 폴더에서 Spring 프로젝트 관리.
* Spring에서 외부와 상호작용하기 위한 코드는 resources에 존재.
* webapp\resource	: 스크립트나 이미지 파일이 존재
* WEB-INF\views		: jsp 파일을 여기에다가 넣는다.
* context:component-scan base-package : 여기를 기준으로 의존성 체크등을 함.
- DB Property, service 등록, dao 객체 등록 등등을 root-context.xml 에서 설정함.

- web.xml
	+ 스프링 프로젝트가 실행됐을 때 가장 먼저 읽어들이는 파일.
	+ 웹프로젝트의 환경설정 파일.
 		++ 사실상 얘가 객체를 등록, 호출하는 Factory 역할.

- servlet-context.xml - controller를 Handling하는 설정파일.
- root-context.xml은 dao를 Handling하는 설정파일.

web.xml안에
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>*.sinc</url-pattern>
	</servlet-mapping>
로 바꾸면? ~> *.sinc로 끝나는 모든 url을 servlet으로 넘김!

- Spring은 Maven을 기반, Maven의 중앙저장소에서 library를 가져온다!

* maven
- 메이븐( Maven )은 war 또는 jar 파일을 빌드( build ), 라이브러리 의존성( dependency ) 해결, 컴파일( compile ) , 배포 ( deploy ) 등을 해결해주는 도구
- pom.xml : 프로젝트에서 사용하는 오브젝트를 관리하는 설정파일. Maven이 참조한다.
	+ <groupId>	: 프로젝트를 구분하는 값으로 사용됩니다. 도메인을 주로사용합니다.
	+ <artifactId>	: 역시 프로젝트를 구분하는 값으로 사용되며, 프로젝트 명을 사용합니다.
	+ <properties> 	: POM 내에서 공통적으로 사용되는 값들을 설정합니다. pom.xml 파일의 다른 곳에서 ${org.springframework-version} 처럼 사용합니다.
	+ <repositories>: 라이브러리를 받아올 저장소를 지정합니다.
	+ <dependencies>: 프로젝트에서 사용되는 라이브러리들을 지정합니다.
	+ <exclusions>	: 여기에 있는 녀석을 쓰지 않겠다! -> 보통 의존관계 관련해서 많이 사용.
	+ <build>	: 프로젝트의 빌드방법을 지정합니다.
	
* Framework에 객체 생성을 요청하는 방법
@Controller	: Controller 객체.
	+ servlet-controller.xml에 설정해도 된다.
@Service	: Service 객체.
@Repository	: DAO

* Spring은 기본적으로 forward로, 넘길때 기본적인 파일의 이름을 넘겨라

ModelAndView, String, Void 를 Controller에서 반환. ~> 논리적인 페이지 이름만을 반환,
servlet-context에서 이를 처리, ViewResolver를 통해 View를 반환.
1) String		: 가고자 하는 jsp의 이름을 return을 통해 반환.
2) void		: 같은 이름의 jsp를 찾아 들어간다.
3) ModelAndView	:
- model -> Sprint에서 request Scope를 갖는 UI 객체. forward 되는 페이지까지 그대로 전달.

@RequestMapping(value = "/index.sinc", method = RequestMethod.GET)

-> /index.sinc라는 요청이 들어왔을때, 밑의 메서드를 호출한다.

* 기본 분기방식 : forward.

Spring 내에서 mapper가 항시 돌아가고 있고, Mapper가 @RequestMapping이라는 Annotation을 만나면 해당 영역을 Mapping한다.
보통 key값으로 URL , value값으로 메소드 혹은 클래스 등등을 받는다.

<context:component-scan base-package="com.sinc.project.**" /> -> 모든 하위 패키지를 받겠다! (in servlet-context.xml)

* 객체 생성에 대한 Annotaion
--------------@Component를 상속받는다!
1) @Controller
2) @Service
3) @Repository	: DAO에 건다는것을 다시 한번 유의

* 의존성 주입에 대한 Annotation
- 의존성이란?	: A와 B 사이에서 A가 B를 생성할때, Spring에서는 레퍼런스만 받아가도록 한다.
1) @Resource
2) @Autowired
3) @Inject
4) @Qualified
<bean>
	<property>
	<constructor-arg> 라는 태그를 통해 의존성 주입. ~> 단독으로 사용할 수 없고, bean 안에서만 사용할 수 있다.
</bean>

root-context.xml에 <bean id="testS" class="com.sinc.project.test.service.TestServiceImpl"></bean> 하는것과
목표하는 Class에서 @Resource(name="testS")하는건 같다!
------------------------------------------------------------
@ModelAttribute 를 통해 parameter를 model에 "msg" 변수에 심었다!
public String doC( @ModelAttribute("msg") String msg){
		
		logger.info("doC called..............................");
		
		return "result";
		
	}
	
@RequestMapping("/doD")
	public String doD(Model model){
		
		//make sample data
		ProductVO product = new ProductVO("Sample Product", 10000);
		
		logger.info("doD");
	
		model.addAttribute(product);
		
		return "productDetail";
		
	}
# String은 view의 정보만 리턴하기 때문에, 데이터를 심기 위해선 Model을 받아서 이 안에 Data를 넣어야 한다.

@RequestMapping("/doE")
	public String doE(RedirectAttributes rttr){
		logger.info("doE called but redirect to /doF.............");
		
		rttr.addFlashAttribute("msg", "This is the Message!! with redirected");
		return "redirect:/doF";
	}

@RequestMapping("/doF")
	public void doF(@ModelAttribute("msg") String msg){
		
		logger.info("doF called..............."+ msg);
	}
	
기본적으로 Spring은 Forward 인데 (request scope에 값 저장), redirect시 이는 유지되지 않음을 기억하자.

하지만 RedirectAttributes rttr에 값을 저장함으로써, redirect를 하더라도 값을 심어서 넘길 수 있게 된다.

RedirectAttributes 객체는 사실상 Redirect 되는 View와 한 쌍이라고 보면 된다.

---------------------------------------------------------
/* 
*	ModelAndView, String, void가 아닌 다른 반환값이 있을때? @ResponseBody를 넣는다.
*	Asynchronous 통신을 위해 주로 사용.
*/
public class SampleController5 {

	@RequestMapping("/doJSON")
	public @ResponseBody ProductVO doJSON(){
		
		ProductVO vo = new ProductVO("샘플상품",30000);
		
		return vo;
		
	}
}
