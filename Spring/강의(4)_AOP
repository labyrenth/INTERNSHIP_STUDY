Spring AOP

- 핵심 관심 사항(core Concern)과 공통 관심 사항(cross-cutting concern)
- 기존 oop에서는 공통관심사항을 여러 모듈에서 적용하는데 중복된 코드를 양산과 같은 한계가 존재 -> 이를 극복하기 위해 AOP가 등장
- Aspect Oriented Programming은 문제를 해결하기 위한 핵심 관심 사항과 전체에 적용되는 공통관심 사항을 기준으로 프로그래밍함으로써 공통 모듈을 손쉽게 적용할 수 있게 해준다.

Aspect		: 여러 객체에서 공통으로 적용되는 공통 관심사항(트랜젝션, 로깅, 보안 등)
JoinPoint		: Aspect가 적용 될 수 있는 지점(메소드, 필드 등)
Pointcut		: 공통 관심사항이 적용될 JoinPoint
Advice		: 어느 시점(메소드 수행 전/후, 예외 발생 후 등) 에 어떤 공통 관심기능(Aspect)을 적용할 지 정의한것.
Weaving		: 어떤 Advice를 어떤 Pointcut(핵심사항)에 적용시킬 것인지에 대한 설정.

** AOP 발생 시점
1) Before		: 메소드 실행 전 실행될 advice
2) After		: 메소드 정상또는 예외 발생 상관없이 실행될 advice = finally
3) After-returning	: 메소드 정상 실행 후 실행될 advice
4) After-throwing	: 메소드에서 예외 발생 시 실행될 advice
5) Aroung	: 모든 시점에서 적용시킬 수 있는 advice

** 명시자
명시자(수식어패턴?리턴타입패턴 패키지패턴? 클래스 이름패턴.메소드이름패턴(패러미터패턴))
Ex) execution(public * test.spring..*Service.regist*(String, ..))
1) 수식어 패턴 : 접근 제어자
2) * : 1개 이상의 모든 값을 표현
3) .. : 0개 이상

AOP 구현 방법 3개
1) POJO CLASS를 이용한 AOP 구현 -> Spring에선 root-context.xml에 설정을 저장.
2) 스프링 API를 이용한 AOP 구현
3) 어노테이션(Annotation)을 이용한 AOP 구현.

<context:component-scan base-package =""/> ~> Annotation Scan에 도움을 주는 놈.

* Annotation을 이용한 AOP
- @Aspect Annotaion을 이용하여 Aspect 클래스에 직접 Advice 및 Pointcut 등을 직접 설정
- 설정파일에 <aop:aspectj-autoproxy></aop:aspectj-autoproxy>를 추가 필요.
- Aspect Class를 <bean>으로 등록.
	+ Annotation
		++@Aspect : Aspect 클래스 선언
		++@Before("pointcut")
		++@AfterReturning(pointcut = "", returning="")
		++@AfterThrowing(pointcut = "", throwing="")		-> 이 둘은 받는 객체의 타입을 지정해야.
		++@After("pointcut")

-- 대상 메소드에서 리턴되는 값을 호출되는 메소드의 매개변수의 이름과 같게 해야 객체가 넘어갈 수 있다.
