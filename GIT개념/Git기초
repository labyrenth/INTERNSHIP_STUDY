1. GIT의 정의
- GIT은 분산 버전 관리 시스템 (프로그램)

2. GIT의 구성요소
1) Repository (저장소)

레포지토리는 말 그대로 파일 등이 저장되는 저장소로, 즉 프로젝트 폴더를 말한다. 저장소의 종류는 다음과 같다.
(1) Remote Repository (원격 저장소): 원격 서버에 저장된 저장소로, 여러 사람이 함께 공유한다.
(2) Local Repository (개인 저장소): 우리가 직접 관리하는 저장소로, 내 PC에 저장되어 있다.

2) Commit

커밋은 프로젝트의 변경 이력을 말한다.

3) Stage
- 우선 스테이지에 대해 설명하기 전 Index에 대한 개념을 이해해야 한다.
Index는 Commit을 통해 변경사항들이 반영되기 전 해당 변경사항의 이력들이 저장되는 공간이다.
따라서 우리가 특정 파일이나 코드를 변경 시 해당 이력은 Index에 기록된다. 이때 이 기록되는 행위를 Stage 또는 Staging이라 한다
따라서 변경사항이 있을 시, 그 중에서 원하는 변경 사항만 stage하고 원하지 않는 변경 사항은 unstage한 뒤 commit을 진행하면 된다.

- 커밋이 여러 변경사항들의 집합이라 하면, 스테이지는 그 변경사항 하나하나를 반영할지를 결정한다고 보면 된다.

4) 4) Branch
- 여러 명이 같은 코드를 공유하며 협업하는 상황을 생각해보자.
각 개발자들은 여러 커밋을 만들며 코드를 발전시키는데, 이때 누가 어떤 커밋을 추가했는지 구분이 가능해야 한다. 이때 사용되는 것이 바로 브랜치이다.
브랜치는 특정 커밋으로부터 분기되는 포인터를 말하는 것으로, 각 개발자들이 개발을 진행하고 있는 환경 또는 흐름을 말한다.
새로운 브랜치가 생성되더라도 기존의 메인 브랜치는 그대로 남아있다.

5) Checkout
- 현재 위치한 커밋에서 다른 커밋으로 이동하는 것을 체크 아웃이라 한다.
체크 아웃을 통해 현재 커밋에서 같은 브랜치 내 다른 커밋으로 이동하거나, 다른 브랜치 내 커밋으로 이동할 수 있다.
결론적으로 체크아웃으로 인해 이전 시점의 버전으로 되돌아갈 수도 있고, 다른 사람의 브랜치로 전환해 다른 개발자들의 코드 진행 상황을 확인해 볼 수도 있다.

6) Merge
- Merge는 나뉘어진 브랜치를 다시 하나의 브랜치로 합치는 것을 말한다. 가장 오류가 많이 발생하는 과정이니 주의해야 한다.
Merge에는 종류가 2가지가 있다. 하나는 fast-forward이고, 나머지 하나는 non fast-forward이다.
먼저 fast-forward는 기본 merge 방식으로, 서로 다른 두 브랜치를 충돌 없이 자동 merge 시키는 병합이다.
하지만 그 과정에서 때때로 일부 문법으로 인해 충돌 (Conflict)이 발생하면 병합에 실패하는 경우가 발생한다.
이때 해당 충돌 기록을 살피며 일일히 해당 코드를 수정한 뒤 Merge를 이어서 진행하면 성공적으로 브랜치가 병합된다.
이 Merge 방식이 non fast-forward이다. 또한 이 과정에서 코드의 수정이 이루어졌으니 마찬가지로 새로운 커밋이 생성된다.

6) Clone
- 클론은 원격 저장소로부터 특정 프로젝트를 통째로 내 로컬 저장소에 다운받는 것을 말한다.

7) Push
- 푸쉬는 현재 내 로컬에서 작업한 변경 사항들을 원격 저장소에 반영하는 것을 말한다.
작업이 완료될 때마다 원격 저장소에 푸쉬해야 다른 사람들이 내 코드를 확인할 수 있다.

8) Pull
- 풀은 원격 저장소에서 변경된 사항들을 내 로컬 저장소에 반영하는 것을 말한다.
Push와 정반대의 개념으로, 다른 사람이 Push를 해서 원격 저장소에 코드를 업데이트하면 우리는 해당 코드를 Pull하여 로컬의 코드를 업데이트한다.
이때 기존의 코드와 내 코드가 다른 경우 Merge를 진행해 코드를 합치게 된다.

Clone은 프로젝트를 처음 불러올 때 프로젝트 전체를 다운받는 것이지만, Pull은 해당 프로젝트에서 변경된 사항들만 다운받는 것을 말한다.
