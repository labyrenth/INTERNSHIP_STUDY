- 사실 깊게 파고들면 책한권 뚝딱이긴 한데, 이번 강의에선 가볍게 나갈것.

1) STREAM

Stream : 데이터가 지나다닐 수 있는 통로.
	+ Scanner는 System이란 변수가 가지고 있는 in을 집어 넣었다.(참조타입일 것이고) 
		++ 이때 in은 InputStream 타입. 1Byte를 입력받는다! 하지만 한글을 넣어도 깨지지 않았다...
			+++ 잘 모르겠으면 System.in 안에 내부적으로 2Byte를 받아들일 수 있는 방법이 있다고만 알아두자.
		++ 다만 우리는 편하게 Scanner sc = new Scanner(System.in); 을 통해서 사용.
	+ 내부적으로 Stream의 역할을 해 줄 수 있는 객체가 있었을 것.
- 보편적으로 Byte와 Chracter 형식으로 데이터 입/출력. 
	+ 이때 한글로 Byte 계열의 데이터 입/출력을 하면 깨진다. Why? 2Byte 이므로!
- java.io.* 에 잔뜩 들어있다.
- 보편적인 Stream은 단방향. ~> 입출력을 하고 싶으면 두개의 Stream을 만들어야 한다!!!
- Stream은 꼭 사용 한 후 Close해야 함. > 만약 Close 안할 경우 문제가 생길 수 있다.

- 크게 3가지 -> 콘솔을 이용한 입출력, 파일을 이용한 입출력, 원격에 있는 다른쪽과 통신(네트워크, 소켓 통신이 필요.)

Byte          | char
--------------|--------------
xxxStream     | xxxReader/Writer

- xxxReader(xxxStream) ~> 매개변수로 받을 수 있다.

Source <---데이터 입출력을 위한 통로---> Destination
       -------------Read------------->
       <-----------Write--------------
       
- 로컬이 아닌, 물리적인 네트워크를 통해서 전달할 시 통신 객체를 어떻게 할 것인가?
	+ xxxVO를 통해, 객체에 변수 값을 담고, Stream을 통해 전달.
	+ Byte 계열에 Object로 객체타입을 가지는 Input/Output의 Stream이 있다.
	+ 1Byte지만 Object를 전달 가능. -> 보내고자 하는 객체를 직렬화(serializable)이라는 인터페이스를 Implements 해서 마킹한 뒤 보내면 Object가 1byte로 쪼개져서 전달.
		++ 마킹 인터페이스 : 인터페이스인데 추상 메서드가 없는 인터페이스 -> 그냥 Implements만 하면 된다!
		++ 보내고자 하는 객체를 실타래, Stream을 바늘구멍이라 생각하면 Serializable를 통해 실타래를 풀어 실로 만들고, 바늘구멍을 통과 해 목적지에 도착한 뒤, 목적지에서 다시 실타래로 만드는 것.
	+ 하지만, 객체의 데이터 중 일부의 데이터는(패스워드와 같은 보안) 여러가지 이유로 전송을 하고 싶지 않을 수 있다. 이러한 변수는 직렬화에서 제외해야 되며, 이를 위해서 변수에 transient를 선언한다.
	또한, 직렬화 조건 중 객체의 멤버들 중에 Serializable 인터페이스 구현되지 않은 객체가 있으면, 직렬화 할 수 없다.(NonSerializableException)
	직렬화 해야 되는 객체 안의 객체 중 Serializable 인터페이스가 구현되지 않으면서 전송하지 않아도 되는 객체 앞에는 transient 를 선언해준다. 그러면 직렬화 대상에서 제외되므로 해당 객체는 직렬화가 가능해진다.

- 직렬화된 정보를 보낼때에는 FileOutputStream과 ObjectOutputStream을 통해 byte단위로 보내야 한다.

- 즉, 최종적으로 Stream을 통해 보낼 수 있는 객체는 3개
1) Byte
2) Chracter
3) Serializable을 통해 Byte화 된 Object

- 만약 빅데이터 관련해서 통신해야한다면, Java와 Python간에 소켓통신을 해야한다.
- 보통은 단방향. nIO라 해서 양방향도 있긴 한데 기본적으로 단방향이라고 보면 편하다.

2) Thread
main()
{
	a();
	b();
}
- 인터프리터 방식 : 순차적으로 a() 시행 후 b() 시행. ~> a()에 문제가 생기면 b()는 시행되지 않음.

- 만약 스레드 방식으로 a()와 b()를 호출한다면 각각의 라이프사이클을 가진다.
- 스레드를 사용하고 싶으면 클래스에 Thread 클래스 또는 Runnable 인터페이스를 상속받아야 함.
	+ Runnable 안에는 run() 추상 메서드가 있다.
		++ 이때 run() 안에 스레드가 수행해야 하는 업무를 집어넣어야 한다!!
		++ But 우리가 run()을 직접적으로 호출해서는 안된다.
		++ Runnable를 상속받는다고 객체가 Thread가 아니라는 점을 명심하자.
	+ Thread 객체 생성자에 Runnable 객체를 집어넣고 이를 실행하면, Thread가 된다.
	+ Thread.start() 로 스레드를 생성. Thread.join() : 스레드가 전부 종료될때까지 대기.
	
- 메인은 기본적으로 데몬 스레드이다.
	+ 이로 인해 메인에서 스레드 기반 클래스를 별도로 호출하게 될 경우, 비동기 스레드가 되어 main의 life cycle과는 별개로 수행되게 된다!

* 스레드 운용에서의 문제
- 공유 객체에 여러개의 스레드가 붙었을 경우가 가장 중요한 문제. ~> 동시성에 관한 문제 및 DeadLock(= 다 죽자) 문제가 발생
	+ 동기화(Synchronize)를 통해 해결해야 한다.
	+ 동시성은 Synchronized를 critical한 변수나 메서드 등의 객체에 걸어주면 된다.
	
- 또한 스레드를 적절히 컨트롤 해야한다.
- Scheduler :  다중 프로그래밍을 가능하게 하는 운영 체제의 동작 기법. 운영 체제는 프로세스들에게 CPU 등의 자원 배정을 적절히 함으로써 시스템의 성능을 개선할 수 있다
	1) Turn around	: 메모리양 할당
	2) Time Slice	: 시간 할당
	
※ CPU 자체는 한번에 한 작업밖에 처리를 못한다.

** 쓰레드의 라이프 사이클
1) 스레드 객체는 Start() 메서드를 통해서 '실행대기(Runnable)' 상태가 됨.
2) CPU를 점유했을 경우, Run() 메서드를 통해 '실행(Running)' 상태가 됨.
	2-1) 모든 작업을 수행하지 못했을 경우, '대기(Block)' 상태로 전환 후 '실행대기(Runnable)' 상태로 전환됨.
3) 작업을 모두 수행했을 경우, '사망(Dead)' 상태가 된다.

-------------------------------------------------------------------------------------------------------------------------------------

Browser		| WAS		| Controller
		| listener	|
----------------|---------------|----------------
html5		|		| 
css3		|		|			|			MODEL			|
				|			|-----------------------------------------------|
				| Presentation Layer	| Business Layer	| persistance Layer	|
				|-----------------------|-----------------------|-----------------------|
				|1) Servlet.java	| xxxService(Interface)	| xxxDAO(Interface)	|
				|- Controller (xxDTO)	|			|			|
				|2) *.jsp		| xxxServiceImplements	| xxxDAOImplements	|
				|- View			|			|			|

Browser --Requset-> View <-> Controller <-> Model
	<-Response-
	
- 이때 Servlet이나 *.jsp는 엄연히 백엔드에 속한다. ~> 서버 계열의 언어로 친다.
- Browser는 화면을 Decoration 하는 역할을 한다.

* NodeJS 같이 JavaScript를 Controller로 사용하는 방법도 가능.
* URL을 Servlet에서 처리되는데, 사용자 리퀘스트 당 1개의 Servlet이 생성되므로 서로 다른 리퀘스트가 들어올 경우 리퀘스트의 종류와 같은 수의 Servlet이 만들어져야 한다.
	+ 사용자의 리퀘스트 자체가 바로 Servlet과 직접 통신하는 것이 아니라, '대문' 을 만들면 된다.
	+ 단일 진입 지점을 만들게 되므로, 관리가 더 편해지게 된다.
	+ 이 대문을 Front-Controller 또는 퍼사드(facade) 패턴
		++ facade 패턴 : 같은 어떤 소프트웨어의 다른 커다란 코드 부분에 대한 간략화된 인터페이스를 제공하는 객체

* FrontController가 다양한 Controller들을 제어해 주어야 하는데 어떻게 하나? 
- 다양한 Controller를 하나의 인터페이스 Controller로 모으고, 중간에 Singleton Factory를 하나 둔다.
	+ Factory는 FrontController에게 Controller 를 넘기고, FrontController가 메소드를 실행하면 각 Controller의 내부 구성을 전혀 몰라도 가능.
	+ 이때 Controller는 동일한 이름의 메서드에 대해 비슷한 기능으로 구현하고 있어야 함.

-------------------------------------------------------------------------------------------------------------------------------------

* View-FrontController-Factory-Ctrl-service-DAO-service-Ctrl-FrontController-View-메인에서 짠

** JAVA에서 DB연동 과정	-> 6개의 절차가 모두 예외를 발생시킨다... -> TRY/CATCH를 알아야 함!
1. DB의 DRIVER 로딩 : 실행 중 단 한번만 연결되면 된다.
2. CONNECTION	-URL,USER,PWD : 전역변수로 두면 종료하고 다시 연결을 못하기 때문에, CONNECTION ~ CLOSE 는 지역변수로 두어야 함.
3. STATEMENT(SQL 구문 포함)
4. 실행 (STATEMENT를 DB에 날림!)
	1) EXECUTEQUERY()	: RESULTSET 반환	-> SELECT 실행
	2) EXECUTEUPDATE()	: INT 반환	-> DML 실행
5. RESULTSET 핸들링 작업	:
6. CLOSE();
-> 6개의 절차 중 하나라도 안되면 실행이 안된다. 이 6개 과정을 묶어놓은 FRAMEWORK : MYBATIS

WAS가 하는 일 -> 커넥션 풀을 만들어서 활성화된 커넥션을 쓰고 반납받기 등등을 한다.


