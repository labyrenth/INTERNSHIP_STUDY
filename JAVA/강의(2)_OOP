여러개의 부품(Component)의 조합을 통해 시스템이 구성
컴포넌트 기반 개발(component-based development, CBD)
-> 기존의 시스템이나 소프트웨어를 구성하는 컴포넌트를 조립해서 하나의 새로운 응용 프로그램을 만드는 소프트웨어 개발방법론

OOP(Object-oriented programming)
1) 은닉화(Encapsulation)
  - 추상화와 연계되어, 객체 타입을 숨길 수 있어야 한다.
  - 현장에선 보통 의존관계가 잘 보이지 않게 되어있다!
  
2) 상속
  - 코드의 재사용성을 높이기 위해 주로 사용.
  - JAVA에서는 EXTENDS 키워드를 통해 상속. 부모클래스는 SUPER, 자기자신은 THIS로 호칭한다.
  - IMPLEMENTS도 있는데 얘는 인터페이스 상속에 쓰임.
  - JAVA는 다중 상속 대신, 단일 상속만 지원함. -> 여러개의 부모를 가질 수 없음!
  - JAVA의 모든 클래스는 OBJECT를 기본적으로 상속받는다.
  EX) [ 인어공주  [ 사람  [ OBJECT  ]]]
      사람에게 SWIMMING() 이란 메서드가 있을 때, SUPER.SWIMMING()과 THIS.SWIMMING()이 둘 다 가능. 왜?
        + 부모건 내꺼 내건 내꺼. 그래도 명확하게 하려면 SUPER.SWIMMING()이 더 좋긴 하다.
        + 반대로 부모는 자식에게 접근 할 수 없다.
  - THIS() / SUPER() ~> 나 자신의 생성자 / 부모의 생성자.
  - 상속 관계가 있는 객체 생성시 부모 객체가 먼저 생성되고, 그 정보가 자식에게 넘어옴을 기억하자.
  * IS - A / HAS - A 관계
  1) IS - A 관계 : 하위 클래스가 상위 클래스를 "포함" 하고 있는 관계를 IS-A 관계
  2) HAS - A 관계 : 클래스 내에 다른 클래스를 "포함" 함으로써 기능적인 것을 사용하고자 했을 때, HAS-A 관계를 이용한다. -> 하위/상위 아닌 동등한 관계
  - 상속이란게 다 좋은데 유연성이 떨어질 수 있음 ~> 이로 인해 프레임워크가 나옴.
  
  ※ 상속 그 자체로는 엄청난 의미는 없고, 다형성과 함께해야 비로소 빛을 발한다!
  
3) 다형성
  - 관리의 효율성을 위해서 여러개의 데이터 타입을 하나의 데이터 타입으로 관리해야 할 필요성이 있지 않을까?
    + 전제 조건으로, 상속 관계에 있어야지만 가능. -> 상속 관계도 없는 여러개의 데이터 타입들을 하나의 데이터 타입으로 묶을 수 없다.
  - 다형성의 종류
    1) 객체 다형성 : 하나의 데이터 타입으로 여러개의 자식 데이터 타입 생성이 가능.
    Ex)
      PersonVo std02 = new StudentVO(1, "일일이", 11, "일산구","하나");
		  PersonVo tch02 = new TeacherVO(2, "둘둘이", 22, "이촌","둘");
		  PersonVo emp02 = new EmployeeVO(3, "삼삼이", 33, "삼각지","셋");
      
    But 변수의 type은 Complie시에 결정. 부모타입은 자식에 대한 접근이 불가능 하기 때문에, 다음 코드는 오류가 난다.
    System.out.format("%s\n%s\n%s\n", std02.stuInfo(), tch02.teacherInfo(),emp02.EmpInfo());
    ~> 이 문제를 해결할 방법? 캐스팅!
    * 이때 형변환시 작은형 -> 큰 형(업캐스팅)으로는 묵시적 변환이 가능하지만, 큰 형 -> 작은형(다운캐스팅)으로 변환시엔 명시를 해 주어야 함.
    Ex) int -> long 은 묵시적 변환 가능하지만, long -> int는 캐스팅 해주어야.
    - 부모 클래스가 자식클래스보다 큰 형 이라는 것을 기억하고, 이러한 상속 관계에서도 캐스팅이 적용된다는 것이 매우 중요하다!!!!!!!!!!
    System.out.format("%s\n%s\n%s\n", ((StudentVO)std02).stuInfo(), ((TeacherVO)tch02).teacherInfo(),((EmployeeVO)emp02).EmpInfo());
    는 정상적으로 적용.
    
    2) 매개변수의 다형성
	    (1) 오버로딩(하나의 클래스 내에 같은 이름을 가지는 메서드가 매개변수의 타입과 갯수를 달리 해서 여러개 가질 수 있음. 내부기능은 같아야.)
	    (2) 
    3) 
    
  ☆ 배열과 다형성
  - JAVA에서 배열은 객체로 취급된다.
  - [] 를 통해 배열을 표시.
  - 고정 길이를 가져야 한다. ~> RUNTIME 시점에 RESIZING이 불가능.
  - 같은 타입만 담을 수 있다.
  - INDEX는 0부터 시작.
  - int [] intarr = new int[10]; 시에, 40byte의 크기를 가진 저장공간이 할당되며, 이매 intarr는 intarr[0]의 주소를 저장.
  
  - 이때 배열은 두가지 타입으로 나뉜다.
    1) 단일 데이터 타입을 담는 배열   : Homogenous Array
    2) 다양한 데이터 타입을 담는 배열 : Heterogenous Array
  - PersonVo[] personArr = new PersonVo[10];
    StudentVO std01 = new StudentVO(1, "일이", 11, "일산구","하나");
		TeacherVO tch01 = new TeacherVO(2, "둘이", 22, "이촌","둘");
		EmployeeVO emp01 = new EmployeeVO(3, "삼이", 33, "삼각지","셋");
		personArr[0] = std01;
		personArr[1] = tch01;
		personArr[2] = emp01;   => 자동으로 Upcasting 됨!
    
    personArr[0].stuInfo(); -> 에러난다. Upcasting되서.
    => Instanceof : 런타임시에 리얼 타입을 체크하는 연산자.
    System.out.println(personArr[0] instanceof StudentVO); 은 true 뜬다.
    
※ 현업에서 STATIC은 쓰지 마라. FINAL(상수)는 가능.
- 상수는 무조건 public이어야 하고, 초기에 선언해주어야 한다.

4) 추상화
	- 공통의 속성이나 기능을 묶어 이름을 붙이는 것.
	- Java에서는 추상 클래스 와 인터페이스 두개가 있다.
	- 현장에서는 인터페이스를 표준화 용도로 많이 쓰인다. 
	(1) 추상 클래스 - 클래스에 추상 메서드가 포함된 클래스.
		+ 메소드 : 구현부를 가져야 한다.
		+ 추상메소드 : 구현부를 가지고 있지 않다.
		- 이경우 abstract class 라고 미리 선언해 주어야 한다. -> 이 클래스는 객체 생성 불가능!
		- 보통 부모클래스에서 많이 쓰인다.  why? 부모클래스는 보통 인스턴스를 안만들기 때문
		- 자식이 부모의 모든 추상 메소드를 오버라이딩 해서 구현하지 않는다면, 자식도 추상클래스가 된다.
		
	(2) 인터페이스 - public interface로 만드는, 클래스의 사촌.
		- 클래스는 변수/생성자/메소드 로 구성되어있다.
		- 인터페이스는 상수/추상 메소드 로 구성되어 있다. -> 인터페이스는 변수/생성자 선언 불가!
		- 자식이 부모 인터페이스의 모든 추상 메소드를 오버라이딩 해서 구현하지 않는다면, 자식은 추상클래스가 된다.
		- 이러한 점으로 인해 강제성을 가지게 된다!
		
Ex)
Animal	--- superman
	 -- Bird
	 -- Tiger
	 + 날아다니는 호랑이를 만들수는 없다. 어떻게 해야할까? -> Bird는 Animal 일반 클래스와 Fly Inteface를 상속받도록 해야. 
	 + 기능을 포함하고 있는 객체의 타입을 숨길수 있어야.
	 
 * 프레임워크는 기본적으로 객체를 단 한번만 생성해서 관리하는 것이 기본.
 -> 싱글톤 패턴, 팩토리 패턴, 커맨드 패턴(명령어의 집합을 그대로 구현할 수 있게 함) 등 패턴의 적용.
** 싱글톤 패턴은 사람이 많이 몰려들 시 과부하가 될 수 있다. -> Java 자체에서 이를 제한할 방법은 없고, 프레임워크 단에서 Activate/DeActivate 등의
설정으로만 가능하다.

public class LTV 
{
	public void turnOn()
	{
		System.out.println("LTV turnOn()");
	}
}

public class STV 
{
	public void powerOn()
	{
		System.out.println("STV");
	}
}

-> 기능은 같지만 이름이 다르고, 변경시 많은것을 변경해야한다. -> 강한 연결.

public interface TV 
{
	public static final int X = 1;
	public void turnOn();
	public void turnOff();
}
-> 일단 인터페이스를 통해 표준화 시킨다.
* 추상클래스에 생성자를 넣을수는 있다. (물론 생성자 자체가 인스턴스를 만들려고 쓰는거긴 하지만)

// TV tv = new TV(); -> 얘는 불가능. why? 인터페이스는 인스턴스를 만들 수 없다.
TV[] tv = new TV[10]; -> 얘는 가능. why? '배열객체'를 만드는 것이므로!

public class TVFactory 
{
	private static TVFactory instance;
	// 생성자를 private로 바꿈으로써 외부에서 접근 불가능!
	
	private TV[] ary;
	
	private TVFactory()
	{
		ary = new TV[2];
		ary[0] = new STV();
		ary[1] = new LTV();
	}
	
	/*
	 * Singleton 패턴. 남이 직접 생성은 못하게 하고,
	 *  Class 단위에서 Static으로 단 하나만 만들어서 보내버리자!
	 */
	
	public static TVFactory getInstance()
	{
		if(instance == null)
		{
			instance = new TVFactory();
		}

		return instance;
	}
	
	/* 사용자에게 직접적인 타입을 던지기 보다는, 간접적으로 인터페이스를 던져버림! */
	public TV getTV(String brand)
	{
		return (brand.equals("samsung"))? ary[0] : ary[1] ;
	}
}

public class TVMain {

	public static void main(String[] args) 
	{
		//TVFactory를 받아옴.
		TVFactory factory = TVFactory.getInstance();
		TV tv = factory.getTV("lg");
		tv.turnOn(); tv.turnOff();
	}
	// 이러한 패턴의 추가로 인해, 의존도가 현저히 낮아졌음을 볼 수 있다. -> 객체 생성도 main이 직접하지 않고 Factory가 알아서 함!
}
