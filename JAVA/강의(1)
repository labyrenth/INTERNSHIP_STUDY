1. JAVA의 특징.

                -
APPLICATION
-----       -   J
 API        J   D
-----       R   K
 JVM        E
-----       -   -
 O.S
-----
 H.W
 
 - 운영체제에 무관하게 JVM 에 의존. -> 어느 운영체제이든간에 JVM만 있으면 프로그램 하나 만들어도 잘 돌아간다!
 
 *.JAVA --COMPLIE--> *.CLASS (JAVA의 실행파일, 바이트코드) --INTERPRITER--> OUTPUT
 
 - 객체지향
 
객체1  객체2  객체3 ...               
-----------------------REAL_WORLD
객체----[명사적 특징 Ex) 이름, 나이, 성별, 직업 ...    
        [동사적 특징 Ex) 움직인다, 먹는다, 잔다 ...
        
~> CLASS = 변수(명사적 특징) + 메서드(동사적 특징) 을 담은 탬플릿!
    + CLASS로부터 만들어진 객체 : 인스턴스. --> CLASS =/= INSTANCE ※중요!

소프트웨어 공학에서 말하는 좋은 프로그래밍 - 결합도(다른 인스턴스와의 관계)는 낮추고/응집력(내용의 통일성)은 높여야

JAVA는 대/소문자 구분. 클래스의 이름 = 자바파일 이름!

-> 클래스의 첫 문자 : 대문자. 변수/메서드의 첫 문자 : 소문자

** 클래스에 public static void main 메서드를 포함하는 클래스만 인터프리터가 가능. ~> 이 약속된 함수의 호출로부터 프로그램이 시작, 종료된다.

** 저장 순간에 complie을 하고 (문법적 오류 등 검사), 이는 즉 *.class 파일이 만들어졌다는 사실이다.

1) 변수의 지정 방식  -> 메서드가 처리할 데이터를 담는 그릇.
[ 접근지정자 데이타타입 변수명; ]

* 데이터타입

기본      ---     숫자형   - 정수   : byte(1byte), short(2byte), int(4byte), long(8byte)
                          - 실수   : float, double
                  문자형           : char(2byte)
                  논리형           : boolean(1byte)
                  
기본 아닌 놈들은 다 참조로 생각하면 된다
* 기본 vs 참조
기본 -> 값을 담는다
참조 -> 값이 아닌, 주소값을 담는다. ~> 클래스를 통해 생성된 인스턴스는 메모리 어딘가에 주소값을 가지고, 참조는 이 인스턴스의 주소값을 지닌다.

2) 메서드의 지정 방식
[ 접근지정자 리턴타입  메서드이름 (파라미터)]
+ 리턴타입
1) 파라미터가 있고, 리턴이 있는 경우
2) 파라미터가 있고, 리턴이 없는 경우
3) 파라미터가 없고, 리턴이 있는 경우
4) 파라미터가 없고, 리턴이 없는 경우

* 이때 리턴 타입을 기본 타입 -> 값을 넘김, 참조타입 -> 주소를 넘김

** String : Java에서 기본적으로 제공해주는, '클래스' -> 타입이 아님!
-> java.lang.* 패키지에 존재.
