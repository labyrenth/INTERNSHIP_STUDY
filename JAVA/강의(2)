여러개의 부품(Component)의 조합을 통해 시스템이 구성
컴포넌트 기반 개발(component-based development, CBD)
-> 기존의 시스템이나 소프트웨어를 구성하는 컴포넌트를 조립해서 하나의 새로운 응용 프로그램을 만드는 소프트웨어 개발방법론

OOP(Object-oriented programming)
1) 은닉화(Encapsulation)
  - 추상화와 연계되어, 객체 타입을 숨길 수 있어야 한다.
2) 상속
  - 코드의 재사용성을 높이기 위해 주로 사용.
  - JAVA에서는 EXTENDS 키워드를 통해 상속. 부모클래스는 SUPER, 자기자신은 THIS로 호칭한다.
  - IMPLEMENTS도 있는데 얘는 인터페이스 상속에 쓰임.
  - JAVA는 다중 상속 대신, 단일 상속만 지원함. -> 여러개의 부모를 가질 수 없음!
  - JAVA의 모든 클래스는 OBJECT를 기본적으로 상속받는다.
  EX) [ 인어공주  [ 사람  [ OBJECT  ]]]
      사람에게 SWIMMING() 이란 메서드가 있을 때, SUPER.SWIMMING()과 THIS.SWIMMING()이 둘 다 가능. 왜?
        + 부모건 내꺼 내건 내꺼. 그래도 명확하게 하려면 SUPER.SWIMMING()이 더 좋긴 하다.
        + 반대로 부모는 자식에게 접근 할 수 없다.
  - THIS() / SUPER() ~> 나 자신의 생성자 / 부모의 생성자.
  - 상속 관계가 있는 객체 생성시 부모 객체가 먼저 생성되고, 그 정보가 자식에게 넘어옴을 기억하자.
  * IS - A / HAS - A 관계
  1) IS - A 관계 : 하위 클래스가 상위 클래스를 "포함" 하고 있는 관계를 IS-A 관계
  2) HAS - A 관계 : 클래스 내에 다른 클래스를 "포함" 함으로써 기능적인 것을 사용하고자 했을 때, HAS-A 관계를 이용한다. -> 하위/상위 아닌 동등한 관계
  - 상속이란게 다 좋은데 유연성이 떨어질 수 있음 ~> 이로 인해 프레임워크가 나옴.
  
3) 다형성
  - 
4) 추상화
  - 
